field state : State
domain State{
    unique function CREATED() : State
    unique function STARTED() : State
    unique function JOINED() : State

    function cons(s : State) : State

    axiom const {
        forall s : State :: s == cons(s)
    }
    axiom enum {
        forall s : State :: {cons(s)} s == CREATED() || s == STARTED() || s == JOINED()
    }
}

method isAlive(thrref : Ref) returns (b : Bool)
    requires acc(thrref.state)
    ensures acc(thrref.state) && thrref.state == old(thrref.state)
    ensures thrref.state != STARTED() ==> !b

    method joining(thrref : Ref) returns (b : Bool)
    requires acc(thrref.state) && thrref.state != CREATED()
    ensures acc(thrref.state)
    && thrref.state == JOINED() && (b <==> old(thrref.state) == STARTED())
    {
        assert(cons(thrref.state) == JOINED() || cons(thrref.state) == STARTED() || cons(thrref.state) == CREATED())
        assert(thrref.state == cons(thrref.state))
        if(thrref.state == JOINED()){
            b := false
        }
        else{
            if(thrref.state == STARTED()){
                thrref.state := JOINED()
                b := true
            }
        }
    }